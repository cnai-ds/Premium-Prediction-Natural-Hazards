2021-02-20 10:31:58,396 [1366] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-20 10:31:58,396 [1366] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-20 10:31:58,397 [1366] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-20 10:31:58,400 [1366] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-20 10:31:58,401 [1366] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-20 10:31:58,401 [1366] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-20 10:31:58,508 [1368] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-20 10:31:58,508 [1368] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-20 10:31:58,509 [1368] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-20 10:31:58,511 [1368] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-20 10:31:58,512 [1368] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-20 10:31:58,512 [1368] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-20 10:32:00,641 [1368] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-20 10:32:00,641 [1368] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-20 10:32:00,642 [1368] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-20 10:32:00,641 [1366] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-20 10:32:00,642 [1366] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-20 10:32:00,643 [1366] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-20 10:32:00,646 [1366] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-20 10:32:00,646 [1366] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-20 10:32:00,647 [1366] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-20 10:32:00,647 [1368] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-20 10:32:00,648 [1368] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-20 10:32:00,648 [1368] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-20 10:32:00,838 [1353] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-20 10:32:00,838 [1353] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-20 10:32:00,839 [1353] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-20 10:32:00,841 [1353] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-20 10:32:00,841 [1353] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-20 10:32:00,841 [1353] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-20 10:32:05,704 [1388] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-20 10:32:05,704 [1388] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-20 10:32:05,704 [1388] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-20 10:32:05,705 [1388] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-20 10:32:05,706 [1388] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-20 10:32:05,706 [1388] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-20 13:20:59,027 [1399] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-20 13:20:59,028 [1399] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-20 13:20:59,028 [1399] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-20 13:20:59,031 [1399] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-20 13:20:59,031 [1399] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-20 13:20:59,031 [1399] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-20 13:20:59,822 [1399] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-20 13:20:59,823 [1399] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-20 13:20:59,823 [1399] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-20 13:20:59,826 [1399] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-20 13:20:59,826 [1399] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-20 13:20:59,827 [1399] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-21 13:41:51,313 [13166] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-21 13:41:51,314 [13166] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-21 13:41:51,314 [13166] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-21 13:41:51,317 [13166] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-21 13:41:51,317 [13166] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-21 13:41:51,318 [13166] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-21 13:42:15,330 [13177] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-21 13:42:15,330 [13177] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-21 13:42:15,331 [13177] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-21 13:42:15,332 [13177] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-21 13:42:15,333 [13177] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-21 13:42:15,333 [13177] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-21 13:42:15,844 [13177] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-21 13:42:15,844 [13177] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-21 13:42:15,844 [13177] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-21 13:42:15,846 [13177] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-21 13:42:15,847 [13177] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-21 13:42:15,848 [13177] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-21 13:43:02,697 [13166] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-21 13:43:02,697 [13166] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-21 13:43:02,697 [13166] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-21 13:43:02,700 [13166] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-21 13:43:02,701 [13166] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-21 13:43:02,701 [13166] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-21 13:52:13,782 [13177] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: /home/mohamed/.virtualenvs/generative/lib/python3.8/site-packages/matplotlib/mpl-data
2021-02-21 13:52:13,782 [13177] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: /home/mohamed/.virtualenvs/generative/lib/python3.8/site-packages/matplotlib/mpl-data
2021-02-21 13:52:13,787 [13177] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=/home/mohamed/.config/matplotlib
2021-02-21 13:52:13,791 [13177] DEBUG    matplotlib:1471: [JupyterRequire] matplotlib version 3.3.2
2021-02-21 13:52:13,791 [13177] DEBUG    matplotlib:1472: [JupyterRequire] interactive is False
2021-02-21 13:52:13,791 [13177] DEBUG    matplotlib:1473: [JupyterRequire] platform is linux
2021-02-21 13:52:13,791 [13177] DEBUG    matplotlib:1474: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'posix', '_thread', '_weakref', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'posixpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'importlib._bootstrap', 'importlib._bootstrap_external', 'types', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', 'contextlib', 'importlib.util', '_virtualenv', 'google', 'mpl_toolkits', 'sitecustomize', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', '_posixsubprocess', 'select', 'collections.abc', 'math', 'selectors', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'pwd', 'grp', 'shutil', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'pprint', 'locale', 'gettext', 'argparse', 'ipython_genutils._version', 'ipython_genutils', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'sysconfig', 'urllib', 'urllib.parse', '_sysconfigdata__x86_64-linux-gnu', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'termios', 'tty', 'pty', 'fcntl', 'resource', '_struct', 'struct', 'ptyprocess.util', 'ptyprocess.ptyprocess', 'ptyprocess', 'pexpect.spawnbase', 'pexpect.pty_spawn', 'pexpect.run', 'pexpect', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_posix', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'ntpath', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.unix_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.file_io', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', '_ctypes', 'ctypes._endian', 'ctypes', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_21', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'ipython_genutils.importstring', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', '_curses', 'curses', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'socketserver', 'logging.config', 'syslog', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_19', 'numpy.random._common', 'secrets', 'numpy.random._bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'pandas._typing', 'pandas.compat', 'pandas.compat.numpy', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.dtypes.missing', 'pandas.util._decorators', 'pandas.core.util', 'pandas._libs.hashing', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas._libs.ops', 'pandas.core.ops.roperator', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.sorting', 'pandas.core.arrays.base', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', '_csv', 'csv', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas._libs.reshape', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.blocks', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.shared_docs', 'gzip', 'mmap', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.generic', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.groupby.base', 'pandas.core.window.common', 'pandas.core.util.numba_', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.series', 'pandas.core.aggregation', 'pandas.core.internals.construction', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas._libs.groupby', 'pandas._libs.reduction', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.engines', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.api', 'pandas.util._tester', 'pandas._libs.testing', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'matplotlib._animation_data', 'matplotlib.animation', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-02-21 13:52:13,891 [13177] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=/home/mohamed/.cache/matplotlib
2021-02-21 13:52:13,893 [13177] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from /home/mohamed/.cache/matplotlib/fontlist-v330.json
2021-02-21 13:52:14,127 [13177] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-21 13:52:14,135 [13177] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-21 13:52:14,140 [13177] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-21 13:52:25,443 [13177] DEBUG    tensorflow:34: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2021-02-21 13:57:01,842 [13177] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=11.0.
2021-02-21 13:57:01,843 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,843 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,843 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
2021-02-21 13:57:01,844 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,844 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-21 13:57:01,844 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,844 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-21 13:57:01,844 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,845 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,845 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-02-21 13:57:01,845 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,845 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,846 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 3.335
2021-02-21 13:57:01,846 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 2.335
2021-02-21 13:57:01,846 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,846 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-02-21 13:57:01,846 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-02-21 13:57:01,846 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,846 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,846 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,846 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,846 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,846 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,846 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
2021-02-21 13:57:01,847 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,847 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,847 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,847 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-02-21 13:57:01,847 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,847 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,847 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,848 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,848 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,848 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,848 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-02-21 13:57:01,848 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-02-21 13:57:01,848 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,848 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,848 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
2021-02-21 13:57:01,848 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,848 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,848 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 2.335
2021-02-21 13:57:01,848 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,849 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,849 [13177] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=11.0 to DejaVu Sans ('/home/mohamed/.virtualenvs/generative/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 2.050000.
2021-02-21 13:57:01,871 [13177] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-02-21 13:57:01,871 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,871 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,872 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
2021-02-21 13:57:01,872 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,872 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-21 13:57:01,872 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,872 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-21 13:57:01,872 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,873 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,873 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-02-21 13:57:01,873 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,873 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,873 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 3.335
2021-02-21 13:57:01,873 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 2.335
2021-02-21 13:57:01,873 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,874 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-02-21 13:57:01,874 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-02-21 13:57:01,874 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,874 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,874 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,874 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,875 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,875 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,875 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
2021-02-21 13:57:01,875 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,875 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,875 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,875 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-02-21 13:57:01,876 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,876 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,876 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,876 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,876 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,877 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,877 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-02-21 13:57:01,877 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-02-21 13:57:01,877 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,877 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,877 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
2021-02-21 13:57:01,877 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,878 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,878 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 2.335
2021-02-21 13:57:01,878 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-02-21 13:57:01,878 [13177] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-21 13:57:01,878 [13177] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/home/mohamed/.virtualenvs/generative/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 2.050000.
2021-02-21 13:58:36,117 [13209] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-21 13:58:36,117 [13209] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-21 13:58:36,117 [13209] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-21 13:58:36,119 [13209] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-21 13:58:36,120 [13209] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-21 13:58:36,120 [13209] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-21 13:58:36,629 [13209] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-21 13:58:36,629 [13209] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-21 13:58:36,630 [13209] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-21 13:58:36,632 [13209] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-21 13:58:36,633 [13209] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-21 13:58:36,633 [13209] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-21 18:02:42,343 [13246] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-21 18:02:42,344 [13246] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-21 18:02:42,344 [13246] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-21 18:02:42,347 [13246] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-21 18:02:42,348 [13246] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-21 18:02:42,348 [13246] DEBUG    root:97: [JupyterRequire] Registering comm targets.
